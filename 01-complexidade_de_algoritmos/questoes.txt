ENADE 2019 Engenharia de Computação
Questão Discursiva 03

Uma árvore binária de busca é uma árvore ordenada que pode apresentar prejuízos no desempenho de determinados algoritmos em função do desbalanceamento causado pela ordem de inserção dos elementos na estrutura. Uma árvore AVL é uma árvore binária de busca balanceada em que a diferença em módulo entre a altura da subárvore esquerda e a altura da subárvore direita de cada nó é, no máximo, de uma unidade.

Nesse contexto, faça o que se pede nos itens a seguir.

\begin{enumerate}[a)]
	\item Apresente uma árvore binária de busca balanceada com os elementos 2, 9, 15, 21, 27, 36 e 50 em que o nó raiz principal contém o elemento 21 e o balanceamento de cada nó seja no máximo uma unidade. (valor: 3,0 pontos)
	\item Considerando as inserções dos elementos 9, 27 e 50, nesta ordem, em uma árvore AVL inicialmente vazia, apresente a árvore resultante. (valor: 3,0 pontos)
	\item Considerando as inserções dos elementos 9, 27, 50, 15, 2, 21 e 36, nesta ordem, em uma árvore AVL inicialmente vazia, apresente a árvore resultante. (valor: 4,0 pontos)
\end{enumerate}



ENADE 2019 Engenharia de Computação
Questão Discursiva 04

Na matemática, um produtório é definido como:
\[ \prod_{i=m}^{n}x_{i} = x_{m} \times x_{m+1} \times x_{m+2} \times ... \times x_{n-1} \times x_{n}\].

Com base nessa equação, e considerando que $\displaystyle{}x_{i} = i + \frac{1}{i}$, com $i > 0$, faça o que se pede nos itens a seguir.

\begin{enumerate}[a)]
	\item Escreva uma \textbf{função iterativa}, em linguagem C, que receba os parâmetros de limite inferior $m$ e de limite superior $n$, calcule e retorne o resultado do produtório. (Valor: 5,0 pontos).
	\item Escreva uma \textbf{função recursiva}, em linguagem C, que receba os parâmetros de limite inferior $m$ e de limite superior $n$, calcule e retorne o resultado do produtório. (Valor: 5,0 pontos).
\end{enumerate}



ENADE 2019 Engenharia de Computação
Questão 09
O MergeSort é um método de ordenação que combina dois vetores ordenados e cria um terceiro vetor maior também ordenado. O algoritmo abaixo apresenta essa ideia e combina os vetores \texttt{a[lo..mid]} e \texttt{a[mid+1..hi]} no vetor \texttt{a[lo..hi]}.

\begin{verbatim}
public class MergeSort {

    private static Comparable[] aux;

    public static void merge(Comparable[] a, int lo, int mid, int hi) {
      int i = lo, j = mid+1;
      for (int k = lo; k <= hi; k++)
          aux[k] = a[k];
      for (int k = lo; k <= hi; k++) {
          if (i > mid)
             a[k] = aux[j++];
          else if (j > hi )
             a[k] = aux[i++];
          else if (aux[j].compareTo(aux[i]))
             a[k] = aux[j++];
          else
             a[k] = aux[i++];
      }
    }

    public static void sort(Comparable[] a) {
      aux = new Comparable[a.length];
      sort(a, 0, a.length - 1);
    }

    private static void sort(Comparable[] a, int lo, int hi) {
      //implementação
    }

}
\end{verbatim}

\begin{flushright}
SEDGEWICK, R.; WAYNE, K. Algorithms. 4. ed. Boston: Addison-Wesley, 2011 (adaptado).
\end{flushright}

Considerando o código apresentado, a implementação do protótipo do método \texttt{sort} da classe \texttt{MergeSort} é

\begin{enumerate}[(A)]

\item \texttt{if (hi == lo)\\
~ ~return;\\
int mid = lo + (hi - lo)/2;\\
sort(a, lo, mid);\\
sort(a, mid, hi);\\
merge(a, lo, mid, hi);}

\item \texttt{if (hi > lo)\\
~ ~return;\\
int mid = lo + (hi - lo)/2;\\
sort(a, lo, mid);\\
sort(a, mid, hi);\\
merge(a, lo, mid, hi);}

\item \texttt{if (hi <= lo)\\
~ ~return;\\
int mid = lo + (hi - lo)/2;\\
sort(a, lo, mid);\\
sort(a, mid, hi);\\
merge(a, lo, mid, hi);}

\item \texttt{if (hi > lo)\\
~ ~return;\\
int mid = lo + (hi - lo)/2;\\
sort(a, lo, mid);\\
sort(a, mid+1, hi);\\
merge(a, lo, mid, hi);}

\item \texttt{if (hi <= lo)\\
~ ~return;\\
int mid = lo + (hi - lo)/2;\\
sort(a, lo, mid);\\
sort(a, mid+1, hi);\\
merdge(a, lo, mid, hi);}

\end{numerate}



ENADE 2021 Ciência da Computação
Questão Discursiva 05
Um heap binário é um arranjo que pode ser
visualizado como uma árvore binária, sendo que
cada nó da árvore corresponde a um elemento
do arranjo, como pode ser observado na figura
a seguir.
Percebe-se que existem dois tipos de heaps:
heaps máximo e heaps mínimo. O heap máximo
é uma estrutura de dados que possibilita a
consulta ou extração de forma eficiente do maior
elemento de uma coleção. A propriedade de
heap máximo especifica que um nó filho (no
código calculado pelas funções left e right) tem
sempre armazenado um valor menor ou igual ao
seu pai.
CORMEN, T. H.; LEISERSON, C. E.; RIVEST, R. L.; STEIN, C.
Introduction to Algorithms. 3. ed. MIT Press and McGraw-Hill.
p. 131-161, 2009 (adaptado).
Considerando a implementação a seguir, o
heapify é uma função auxiliar para reorganizar
o arranjo (garantindo a propriedade de heap
máximo em uma determinada posição do arranjo)
e buildHeap é uma função que usa heapify
para reorganizar todas as posições do arranjo
(garantindo a propriedade de heap máximo para
todos os elementos).


int left(int i) { return (2 * i + 1); }
int right(int i) { return (2 * i + 2); }
/* a - arranjo, n - número de
elementos, i - posição do elemento
que deve ser colocado em propriedade
de heap */ void heapify (int *a, int
n, int i)
{
int e, d, max, aux;
e = left(i);
d = right(i);
if (e < n && a[e] > a[i])
		 max = e;
else
		 max = i;
if (d < n && a[d] > a[max])
		 max = d;
if (max != i)
{
		 aux = a[i];
		 a[i] = a[max];
		 a[max] = aux;
		 heapify(a, n, max);
}
}
/a - arranjo, n - número de elementos */
void buildHeap(int *a, int n)
{
int i;
for (i = (n-1)/2; i >= 0; i--)
		 heapify(a, n, i);
}


De acordo com as informações apresentadas, faça o que se pede nos itens a seguir.
a) Como ficará o arranjo int a[ ] = {2, 5, 8 ,13, 21, 1, 3, 34} após a execução da
função buildHeap(a, 8). (valor: 5,0 pontos)
b) Apresente a complexidade de tempo no pior caso para a função heapify, use a notação O ou Ɵ.
(valor: 5,0 pontos)







QUESTÃO 23
O uso da estrutura de dados tipo Árvore Binária de Busca é uma técnica fundamental de programação.
Uma árvore binária é um conjunto finito de elementos que está vazio ou é particionado em três
subconjuntos, a saber: 1) raiz da árvore - elemento inicial (único), 2) subárvore da esquerda - se vista
isoladamente compõe outra árvore e 3) subárvore da direita - se vista isoladamente compõe outra árvore.
A árvore pode não ter qualquer elemento (árvore vazia). A definição de árvore é recursiva e, devido a
isso, muitas operações sobre árvores binárias utilizam recursão. Sendo “A” a raiz de uma árvore binária
e “B” a raiz de sua subárvore esquerda ou direita, é dito que “A” é pai de “B” e que “B” é filho de “A”.
Um elemento sem filhos é chamado de folha. A altura da árvore é o número de elementos encontrados
no caminho descendente mais longo que liga a sua raiz até uma folha.
Uma Árvore de Busca Binária é uma árvore binária especializada, na qual a informação que o elemento
filho esquerdo possui é numericamente menor que a informação do elemento pai. De forma análoga,
a informação que o elemento filho direito possui é numericamente maior ou igual à informação do
elemento pai. O objetivo de organizar dados em Árvores Binárias de Busca é facilitar a tarefa de encontrar
um determinado elemento. O percurso completo de uma árvore binária consiste em visitar todos os
elementos desta árvore, segundo algum critério, a fim de processá-los. Três formas são bem conhecidas
para a realização deste percurso: 1) pré-ordem, 2) em-ordem e 3) pós-ordem. A figura a seguir mostra um
exemplo de árvore binária.
J
D
 O
A
 L
 R
K
 M
Figura – Exemplo de Árvore Binária
LAUREANO, M. A. P. Estrutura de Dados com Algoritmos. São Paulo: Brasport, 2008. p. 126, 129, 136 (adaptado).
Considerando o texto e a figura apresentados e que a seguinte lista de elementos numéricos:
(27, 34, 40, 18, 23, 5, 25, 36, 10, 7, -2) seja totalmente transferida para uma estrutura de Árvore Binária de
Busca, inicialmente vazia, elemento a elemento, da esquerda para a direita, assinale a alternativa correta.
A A árvore resultante terá 5 níveis de altura, com 6 elementos à esquerda da raiz principal (inicial)
e 4 elementos à direita.
B O percurso da árvore em Pré-ordem irá processar os elementos na seguinte ordem (do primeiro ao
último): -2, 7, 10, 5, 25, 23, 18, 36, 40, 34, 27.
C O percurso da árvore em Em-ordem irá processar os elementos na seguinte ordem (do primeiro ao
último): -2, 5, 7, 10, 18, 23, 25, 27, 34, 36, 40.
D O percurso da árvore em Pós-ordem irá processar os elementos na seguinte ordem (do primeiro ao
último): 27, 18, 5, -2, 10, 7, 23, 25, 34, 40, 36.
E O número máximo de elementos que essa árvore poderá ter com 10 níveis será de 1 024 elementos.s


